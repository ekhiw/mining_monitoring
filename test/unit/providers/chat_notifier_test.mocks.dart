// Mocks generated by Mockito 5.4.4 from annotations
// in mining_monitoring/test/unit/providers/chat_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:centrifuge/src/client.dart' as _i7;
import 'package:centrifuge/src/events.dart' as _i2;
import 'package:centrifuge/src/subscription.dart' as _i3;
import 'package:get_storage/get_storage.dart' as _i4;
import 'package:mining_monitoring/data/model/responses/user_response_entity.dart'
    as _i10;
import 'package:mining_monitoring/data/repository/message_respository.dart'
    as _i5;
import 'package:mining_monitoring/data/store/user_store.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePublishResult_0 extends _i1.SmartFake implements _i2.PublishResult {
  _FakePublishResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRPCResult_1 extends _i1.SmartFake implements _i2.RPCResult {
  _FakeRPCResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHistoryResult_2 extends _i1.SmartFake implements _i2.HistoryResult {
  _FakeHistoryResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePresenceResult_3 extends _i1.SmartFake
    implements _i2.PresenceResult {
  _FakePresenceResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePresenceStatsResult_4 extends _i1.SmartFake
    implements _i2.PresenceStatsResult {
  _FakePresenceStatsResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubscription_5 extends _i1.SmartFake implements _i3.Subscription {
  _FakeSubscription_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetStorage_6 extends _i1.SmartFake implements _i4.GetStorage {
  _FakeGetStorage_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MessageRespository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRespository extends _i1.Mock
    implements _i5.MessageRespository {
  MockMessageRespository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<dynamic> getAllMessage({
    int? page,
    int? limit,
    String? sort,
    required String? equipmentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllMessage,
          [],
          {
            #page: page,
            #limit: limit,
            #sort: sort,
            #equipmentId: equipmentId,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> getTemplateMessage({int? limit}) => (super.noSuchMethod(
        Invocation.method(
          #getTemplateMessage,
          [],
          {#limit: limit},
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> sendMessage({
    required String? equipmentId,
    required String? message,
    String? categoryId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #equipmentId: equipmentId,
            #message: message,
            #categoryId: categoryId,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i2.ConnectEvent> get connectStream => (super.noSuchMethod(
        Invocation.getter(#connectStream),
        returnValue: _i6.Stream<_i2.ConnectEvent>.empty(),
      ) as _i6.Stream<_i2.ConnectEvent>);

  @override
  _i6.Stream<_i2.ErrorEvent> get errorStream => (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i6.Stream<_i2.ErrorEvent>.empty(),
      ) as _i6.Stream<_i2.ErrorEvent>);

  @override
  _i6.Stream<_i2.DisconnectEvent> get disconnectStream => (super.noSuchMethod(
        Invocation.getter(#disconnectStream),
        returnValue: _i6.Stream<_i2.DisconnectEvent>.empty(),
      ) as _i6.Stream<_i2.DisconnectEvent>);

  @override
  _i6.Stream<_i2.MessageEvent> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i6.Stream<_i2.MessageEvent>.empty(),
      ) as _i6.Stream<_i2.MessageEvent>);

  @override
  _i6.Stream<_i2.ServerSubscribeEvent> get subscribeStream =>
      (super.noSuchMethod(
        Invocation.getter(#subscribeStream),
        returnValue: _i6.Stream<_i2.ServerSubscribeEvent>.empty(),
      ) as _i6.Stream<_i2.ServerSubscribeEvent>);

  @override
  _i6.Stream<_i2.ServerUnsubscribeEvent> get unsubscribeStream =>
      (super.noSuchMethod(
        Invocation.getter(#unsubscribeStream),
        returnValue: _i6.Stream<_i2.ServerUnsubscribeEvent>.empty(),
      ) as _i6.Stream<_i2.ServerUnsubscribeEvent>);

  @override
  _i6.Stream<_i2.ServerPublishEvent> get publishStream => (super.noSuchMethod(
        Invocation.getter(#publishStream),
        returnValue: _i6.Stream<_i2.ServerPublishEvent>.empty(),
      ) as _i6.Stream<_i2.ServerPublishEvent>);

  @override
  _i6.Stream<_i2.ServerJoinEvent> get joinStream => (super.noSuchMethod(
        Invocation.getter(#joinStream),
        returnValue: _i6.Stream<_i2.ServerJoinEvent>.empty(),
      ) as _i6.Stream<_i2.ServerJoinEvent>);

  @override
  _i6.Stream<_i2.ServerLeaveEvent> get leaveStream => (super.noSuchMethod(
        Invocation.getter(#leaveStream),
        returnValue: _i6.Stream<_i2.ServerLeaveEvent>.empty(),
      ) as _i6.Stream<_i2.ServerLeaveEvent>);

  @override
  _i6.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void setToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setConnectData(List<int>? connectData) => super.noSuchMethod(
        Invocation.method(
          #setConnectData,
          [connectData],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> send(List<int>? data) => (super.noSuchMethod(
        Invocation.method(
          #send,
          [data],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.PublishResult> publish(
    String? channel,
    List<int>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #publish,
          [
            channel,
            data,
          ],
        ),
        returnValue: _i6.Future<_i2.PublishResult>.value(_FakePublishResult_0(
          this,
          Invocation.method(
            #publish,
            [
              channel,
              data,
            ],
          ),
        )),
      ) as _i6.Future<_i2.PublishResult>);

  @override
  _i6.Future<_i2.RPCResult> rpc(
    String? method,
    List<int>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [
            method,
            data,
          ],
        ),
        returnValue: _i6.Future<_i2.RPCResult>.value(_FakeRPCResult_1(
          this,
          Invocation.method(
            #rpc,
            [
              method,
              data,
            ],
          ),
        )),
      ) as _i6.Future<_i2.RPCResult>);

  @override
  _i6.Future<_i2.HistoryResult> history(
    String? channel, {
    int? limit = 0,
    _i2.StreamPosition? since,
    bool? reverse = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #history,
          [channel],
          {
            #limit: limit,
            #since: since,
            #reverse: reverse,
          },
        ),
        returnValue: _i6.Future<_i2.HistoryResult>.value(_FakeHistoryResult_2(
          this,
          Invocation.method(
            #history,
            [channel],
            {
              #limit: limit,
              #since: since,
              #reverse: reverse,
            },
          ),
        )),
      ) as _i6.Future<_i2.HistoryResult>);

  @override
  _i6.Future<_i2.PresenceResult> presence(String? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #presence,
          [channel],
        ),
        returnValue: _i6.Future<_i2.PresenceResult>.value(_FakePresenceResult_3(
          this,
          Invocation.method(
            #presence,
            [channel],
          ),
        )),
      ) as _i6.Future<_i2.PresenceResult>);

  @override
  _i6.Future<_i2.PresenceStatsResult> presenceStats(String? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #presenceStats,
          [channel],
        ),
        returnValue: _i6.Future<_i2.PresenceStatsResult>.value(
            _FakePresenceStatsResult_4(
          this,
          Invocation.method(
            #presenceStats,
            [channel],
          ),
        )),
      ) as _i6.Future<_i2.PresenceStatsResult>);

  @override
  _i6.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  bool hasSubscription(String? channel) => (super.noSuchMethod(
        Invocation.method(
          #hasSubscription,
          [channel],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Subscription getSubscription(String? channel) => (super.noSuchMethod(
        Invocation.method(
          #getSubscription,
          [channel],
        ),
        returnValue: _FakeSubscription_5(
          this,
          Invocation.method(
            #getSubscription,
            [channel],
          ),
        ),
      ) as _i3.Subscription);

  @override
  void removeSubscription(_i3.Subscription? subscription) => super.noSuchMethod(
        Invocation.method(
          #removeSubscription,
          [subscription],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Subscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscription extends _i1.Mock implements _i3.Subscription {
  MockSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get channel => (super.noSuchMethod(
        Invocation.getter(#channel),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#channel),
        ),
      ) as String);

  @override
  _i6.Stream<_i2.PublishEvent> get publishStream => (super.noSuchMethod(
        Invocation.getter(#publishStream),
        returnValue: _i6.Stream<_i2.PublishEvent>.empty(),
      ) as _i6.Stream<_i2.PublishEvent>);

  @override
  _i6.Stream<_i2.JoinEvent> get joinStream => (super.noSuchMethod(
        Invocation.getter(#joinStream),
        returnValue: _i6.Stream<_i2.JoinEvent>.empty(),
      ) as _i6.Stream<_i2.JoinEvent>);

  @override
  _i6.Stream<_i2.LeaveEvent> get leaveStream => (super.noSuchMethod(
        Invocation.getter(#leaveStream),
        returnValue: _i6.Stream<_i2.LeaveEvent>.empty(),
      ) as _i6.Stream<_i2.LeaveEvent>);

  @override
  _i6.Stream<_i2.SubscribeSuccessEvent> get subscribeSuccessStream =>
      (super.noSuchMethod(
        Invocation.getter(#subscribeSuccessStream),
        returnValue: _i6.Stream<_i2.SubscribeSuccessEvent>.empty(),
      ) as _i6.Stream<_i2.SubscribeSuccessEvent>);

  @override
  _i6.Stream<_i2.SubscribeErrorEvent> get subscribeErrorStream =>
      (super.noSuchMethod(
        Invocation.getter(#subscribeErrorStream),
        returnValue: _i6.Stream<_i2.SubscribeErrorEvent>.empty(),
      ) as _i6.Stream<_i2.SubscribeErrorEvent>);

  @override
  _i6.Stream<_i2.UnsubscribeEvent> get unsubscribeStream => (super.noSuchMethod(
        Invocation.getter(#unsubscribeStream),
        returnValue: _i6.Stream<_i2.UnsubscribeEvent>.empty(),
      ) as _i6.Stream<_i2.UnsubscribeEvent>);

  @override
  _i6.Future<void> subscribe() => (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> unsubscribe() => (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.PublishResult> publish(List<int>? data) => (super.noSuchMethod(
        Invocation.method(
          #publish,
          [data],
        ),
        returnValue: _i6.Future<_i2.PublishResult>.value(_FakePublishResult_0(
          this,
          Invocation.method(
            #publish,
            [data],
          ),
        )),
      ) as _i6.Future<_i2.PublishResult>);

  @override
  _i6.Future<_i2.PresenceResult> presence() => (super.noSuchMethod(
        Invocation.method(
          #presence,
          [],
        ),
        returnValue: _i6.Future<_i2.PresenceResult>.value(_FakePresenceResult_3(
          this,
          Invocation.method(
            #presence,
            [],
          ),
        )),
      ) as _i6.Future<_i2.PresenceResult>);

  @override
  _i6.Future<_i2.PresenceStatsResult> presenceStats() => (super.noSuchMethod(
        Invocation.method(
          #presenceStats,
          [],
        ),
        returnValue: _i6.Future<_i2.PresenceStatsResult>.value(
            _FakePresenceStatsResult_4(
          this,
          Invocation.method(
            #presenceStats,
            [],
          ),
        )),
      ) as _i6.Future<_i2.PresenceStatsResult>);

  @override
  _i6.Future<_i2.HistoryResult> history({
    int? limit = 0,
    _i2.StreamPosition? since,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #history,
          [],
          {
            #limit: limit,
            #since: since,
          },
        ),
        returnValue: _i6.Future<_i2.HistoryResult>.value(_FakeHistoryResult_2(
          this,
          Invocation.method(
            #history,
            [],
            {
              #limit: limit,
              #since: since,
            },
          ),
        )),
      ) as _i6.Future<_i2.HistoryResult>);
}

/// A class which mocks [GetUserStoreHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserStoreHelper extends _i1.Mock
    implements _i9.GetUserStoreHelper {
  MockGetUserStoreHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetStorage get getStorage => (super.noSuchMethod(
        Invocation.getter(#getStorage),
        returnValue: _FakeGetStorage_6(
          this,
          Invocation.getter(#getStorage),
        ),
      ) as _i4.GetStorage);

  @override
  set getStorage(_i4.GetStorage? _getStorage) => super.noSuchMethod(
        Invocation.setter(
          #getStorage,
          _getStorage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> saveNik(String? nik) => (super.noSuchMethod(
        Invocation.method(
          #saveNik,
          [nik],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> saveUser(_i10.UserResponseDataEntity? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [data],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
